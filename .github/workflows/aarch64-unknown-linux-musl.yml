name: Linux build 🐧 (aarch64-unknown-linux-musl)
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - 'feat/*'
jobs:
  build:
    name: aarch64-unknown-linux-musl
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
        fail-fast: false
        matrix:

          target:
            # Linux targets 🐧
                - aarch64-unknown-linux-musl # ARM64 Linux with MUSL      ✅ Tested

          include:
            # Linux targets 🐧
            - target: aarch64-unknown-linux-musl
              os: ubuntu-latest
              cross: true
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true

      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      - name: Build
        run: cargo build --release

      - name: Upload binary to GitHub Packages
        uses: actions/upload-artifact@v2
        with:
          name: ssg-${{ matrix.target }}-v${{ env.VERSION }}
          path: target/release/ssg

      - name: Verify upload (binary)
        run: echo "Binary uploaded successfully."
        shell: /bin/bash -e {0}

      - name: Print error (tar.gz)
        run: echo "Binary upload failed with exit code ${{ steps.upload_binary.exit_code }}."
        shell: /bin/bash -e {0}

      - name: Tar files
        run: tar -czvf ssg-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz target/release/ssg

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ssg-${{ matrix.target }}-v${{ env.VERSION }}
          path: ssg-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz
          run: echo "Binary uploaded successfully."
name: ❯ Build

on:
  push:
    branches:
      - 'feat/*'

jobs:
  build:
    # This job builds the project for all the targets and generates a
    # release artifact that contains the binaries for all the targets.
    name: ❯ Build 🛠
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        target:
          # List of targets: https://doc.rust-lang.org/nightly/rustc/platform-support.html

          # FreeBSD targets 🐬
          - x86_64-unknown-freebsd # 64-bit FreeBSD on x86-64                                     ✅ Tested

          # Linux targets 🐧
          - aarch64-unknown-linux-gnu # 64-bit Linux systems on ARM architecture                  ✅ Tested
          - aarch64-unknown-linux-musl # 64-bit Linux systems on ARM architecture                 ✅ Tested
          - arm-unknown-linux-gnueabi # ARMv6 Linux (kernel 3.2, glibc 2.17)                      ✅ Tested
          - armv7-unknown-linux-gnueabihf # ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)       ✅ Tested
          - i686-unknown-linux-gnu # 32-bit Linux (kernel 3.2+, glibc 2.17+)                      ✅ Tested
          - i686-unknown-linux-musl # 32-bit Linux (kernel 3.2+, musl libc)                       ✅ Tested
          - x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)                 ✅ Tested
          - x86_64-unknown-linux-musl # 64-bit Linux (kernel 2.6.32+, musl libc)                  ✅ Tested

          # macOS targets 🍎
          - aarch64-apple-darwin # 64-bit macOS on Apple Silicon                                  ✅ Tested
          - x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)                               ✅ Tested

          # Illumos targets 🌞
          - x86_64-unknown-illumos # 64-bit Illumos on x86-64                                     ✅ Tested

        include:
          # FreeBSD targets 🐬
          - target: x86_64-unknown-freebsd
            os: ubuntu-latest
            cross: true

          # Linux targets 🐧
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabi
            os: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: i686-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          # Illumos targets 🌞
          - target: x86_64-unknown-illumos
            os: ubuntu-latest
            cross: true

          # macOS targets 🍎
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: true

    runs-on: ${{ matrix.os }}

    steps:
      # Install the Rust toolchain
      - uses: hecrj/setup-rust-action@v1
      # Check out the repository code
      - uses: actions/checkout@master
      # Install the targets for the cross compilation toolchain
      - name: Install dependencies
        run: |
          export DEBIAN_FRONTED=noninteractive
          sudo apt-get -qq update
          sudo apt-get install -y libssl-dev pkg-config
          rustup target add ${{ matrix.target }}

      # Cache dependencies to speed up subsequent builds
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      # Install the targets for the cross compilation toolchain
      - name: Install target
        id: install-target
        run: rustup target add ${{ matrix.target }}

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      # Install the cross compilation toolchain
      - name: Install Cross
        id: install-cross
        run: |
          # Install cross
          cargo install cross
          # Clean the build artifacts
          cargo clean --verbose
        shell: /bin/bash -e {0}

      # Build the targets
      - name: Build targets
        id: build-targets
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --package ssg --release --target ${{ matrix.target }}

      # Package the binary for each target
      - name: Package the binary
        id: package-binary
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .
          echo "${{ matrix.target }}.tar.gz=target/package/${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
      # Archive the binary for each target
      - name: Archive ssg binary
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}.tar.gz
          path: ${{ env[format('{0}.tar.gz', matrix.target)] }}

      # Upload the binary for each target
      - name: Upload the binary
        id: upload-binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}.tar.gz
          path: ${{ env[format('{0}.tar.gz', matrix.target)] }}

